use std::{collections::HashMap, vec};

use once_cell::sync::Lazy;

pub static MAP: Lazy<HashMap<u8, (Position, Vec<u8>)>> = Lazy::new(|| {
    let cities_tuples = vec![
        (
            0,
            (
                Position(0.7801603911549438, 0.49474860768712914),
                vec![36, 34, 31, 28, 17],
            ),
        ),
        (
            1,
            (
                Position(0.5249831588690298, 0.14953665513987202),
                vec![35, 31, 27, 26, 25, 20, 18, 17, 15, 6],
            ),
        ),
        (
            2,
            (
                Position(0.8085335344099086, 0.7696330846542071),
                vec![39, 36, 21, 19, 9, 7, 4],
            ),
        ),
        (
            3,
            (
                Position(0.2599134798656856, 0.14485659826020547),
                vec![35, 20, 15, 11, 6],
            ),
        ),
        (
            4,
            (
                Position(0.7353838928272886, 0.8089961609345658),
                vec![39, 36, 21, 19, 9, 7, 2],
            ),
        ),
        (
            5,
            (
                Position(0.09088671576431506, 0.7222846879290787),
                vec![32, 16, 14],
            ),
        ),
        (
            6,
            (
                Position(0.313999018186756, 0.01876171413125327),
                vec![35, 20, 15, 11, 1, 3],
            ),
        ),
        (
            7,
            (
                Position(0.6824813442515916, 0.8016111783687677),
                vec![39, 36, 22, 21, 19, 9, 2, 4],
            ),
        ),
        (
            8,
            (
                Position(0.20128789391122526, 0.43196344222361227),
                vec![33, 30, 14],
            ),
        ),
        (
            9,
            (
                Position(0.8551947714242674, 0.9011339078096633),
                vec![36, 21, 19, 2, 4, 7],
            ),
        ),
        (
            10,
            (
                Position(0.7581736589784409, 0.24026772497187532),
                vec![31, 27, 26, 25, 24, 18, 17, 13],
            ),
        ),
        (
            11,
            (
                Position(0.25311953895059136, 0.10321622277398101),
                vec![35, 20, 15, 3, 6],
            ),
        ),
        (
            12,
            (
                Position(0.4813859169876731, 0.5006237737207431),
                vec![37, 34, 31, 28, 22, 17],
            ),
        ),
        (
            13,
            (
                Position(0.9112422509614865, 0.1839028760606296),
                vec![27, 24, 18, 10],
            ),
        ),
        (
            14,
            (
                Position(0.04580558670435442, 0.5886703168399895),
                vec![33, 30, 16, 5, 8],
            ),
        ),
        (
            15,
            (
                Position(0.4582523173083307, 0.1735506267461867),
                vec![35, 31, 26, 25, 20, 17, 1, 3, 6, 11],
            ),
        ),
        (
            16,
            (
                Position(0.12939557977525573, 0.690016328140396),
                vec![37, 30, 5, 14],
            ),
        ),
        (
            17,
            (
                Position(0.607698913404794, 0.362322730884702),
                vec![34, 31, 28, 26, 25, 18, 0, 1, 10, 12, 15],
            ),
        ),
        (
            18,
            (
                Position(0.719569201584275, 0.13985272363426526),
                vec![31, 27, 26, 25, 24, 1, 10, 13, 17],
            ),
        ),
        (
            19,
            (
                Position(0.8860336256842246, 0.891868301175821),
                vec![21, 2, 4, 7, 9],
            ),
        ),
        (
            20,
            (
                Position(0.4238357358399233, 0.026771817842421997),
                vec![35, 26, 1, 3, 6, 11, 15],
            ),
        ),
        (
            21,
            (
                Position(0.8252497121120052, 0.9532681441921305),
                vec![2, 4, 7, 9, 19],
            ),
        ),
        (
            22,
            (
                Position(0.47415009287034726, 0.7353428557575755),
                vec![39, 37, 29, 7, 12],
            ),
        ),
        (
            23,
            (
                Position(0.26253385360950576, 0.9768234503830939),
                vec![38, 32, 29],
            ),
        ),
        (
            24,
            (
                Position(0.9363713903322148, 0.13022993020357043),
                vec![27, 10, 13, 18],
            ),
        ),
        (
            25,
            (
                Position(0.6243437191127235, 0.21665962402659544),
                vec![34, 31, 27, 26, 1, 10, 15, 17, 18],
            ),
        ),
        (
            26,
            (
                Position(0.5572917679006295, 0.2083567880838434),
                vec![34, 31, 27, 1, 10, 15, 17, 18, 20, 25],
            ),
        ),
        (
            27,
            (
                Position(0.7482655725962591, 0.12631654071213483),
                vec![31, 1, 10, 13, 18, 24, 25, 26],
            ),
        ),
        (
            28,
            (
                Position(0.6435799740880603, 0.5488515965193208),
                vec![39, 36, 34, 31, 0, 12, 17],
            ),
        ),
        (
            29,
            (
                Position(0.34509802713919313, 0.8800306496459869),
                vec![38, 37, 32, 22, 23],
            ),
        ),
        (
            30,
            (
                Position(0.021423673670808885, 0.4666482714834408),
                vec![33, 8, 14, 16],
            ),
        ),
        (
            31,
            (
                Position(0.640952694324525, 0.3232711412508066),
                vec![34, 0, 1, 10, 12, 15, 17, 18, 25, 26, 27, 28],
            ),
        ),
        (
            32,
            (
                Position(0.17440205342790494, 0.9528527425842739),
                vec![38, 5, 23, 29],
            ),
        ),
        (
            33,
            (
                Position(0.1332965908314021, 0.3996510641743197),
                vec![8, 14, 30],
            ),
        ),
        (
            34,
            (
                Position(0.583993110207876, 0.42704536740474663),
                vec![0, 12, 17, 25, 26, 28, 31],
            ),
        ),
        (
            35,
            (
                Position(0.3073865727705063, 0.09186645974288632),
                vec![1, 3, 6, 11, 15, 20],
            ),
        ),
        (
            36,
            (
                Position(0.740625863119245, 0.68128520136847),
                vec![39, 0, 2, 4, 7, 9, 28],
            ),
        ),
        (
            37,
            (
                Position(0.3345284735051981, 0.6569436279895382),
                vec![12, 16, 22, 29],
            ),
        ),
        (
            38,
            (
                Position(0.17972981733780147, 0.999395685828547),
                vec![23, 29, 32],
            ),
        ),
        (
            39,
            (
                Position(0.6315322816286787, 0.7311657634689946),
                vec![2, 4, 7, 22, 28, 36],
            ),
        ),
    ];
    cities_tuples.into_iter().collect()
});

// x and y coordinates
#[derive(Debug, Clone)]
pub struct Position(pub f64, pub f64);
